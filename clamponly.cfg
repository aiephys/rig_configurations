##  Example ACQ4 configuration file.
##
##
##


# Devices are defined in another config file:
devices:

    # First, define the NI DAQ device we will use. For use with a real DAQ, simply
    # remove the line 'mock: True'. The name 'DAQ', defined here, will appear
    # many times throughout the config to refer to this device.
    DAQ:
        driver: 'NiDAQ'
        mock: True
        # Default mode for AI channels. Options are 'NRSE', 'RSE', and 'DIFF'
        # This may be overridden for individual channels.
        defaultAIMode: 'NRSE'
        
    # A simulated patch-clamp amplifier. It is connected to a Hodgkin-Huxley
    # neuron model, allowing some of ACQ4's acquisition modules to be tested on
    # a "real" system.
    #Clamp1:
    #    driver: 'MockClamp'
    #    simulator: 'builtin'  # Also supports 'neuron' if you have neuron+python
    #                            # installed. See lib/devices/MockClamp/neuronSim.py.
    #                            
    #    # Define two connections to the DAQ:
    #    Command:
    #        device: 'DAQ'
    #        channel: '/Dev1/ao0'
    #        type: 'ao'
    #    ScaledSignal:
    #        device: 'DAQ'
    #        channel: '/Dev1/ai5'
    #        mode: 'NRSE'
    #        type: 'ai'
    #        
    #    # Default holding values.
    #    icHolding: 0.0
    #    vcHolding: -65e-3


    Clamp1:
        driver: 'MultiClamp'
        channelID: 'model:MC700B,sn:00836059,chan:1'
        pythonExecutable: 'C:\\Anaconda2-32\\python.exe'
        commandChannel: 
            device: 'DAQ'
            channel: '/Dev1/ao0'
            type: 'ao'
        primaryChannel: 
            device: 'DAQ'
            channel: '/Dev1/ai10'
            mode: 'NRSE'
            type: 'ai'
        secondaryChannel: 
            device: 'DAQ'
            channel: '/Dev1/ai9'
            mode: 'NRSE'
            type: 'ai'
        vcHolding: -65e-3
        icHolding: 0.0

    Clamp2:
        driver: 'MultiClamp'
        channelID: 'model:MC700B,sn:00836059,chan:2'
        #pythonExecutable: 'C:\\Anaconda2-32\\python.exe'
        commandChannel: 
            device: 'DAQ'
            channel: '/Dev1/ao0'
            type: 'ao'
        primaryChannel: 
            device: 'DAQ'
            channel: '/Dev1/ai10'
            mode: 'NRSE'
            type: 'ai'
        secondaryChannel: 
            device: 'DAQ'
            channel: '/Dev1/ai9'
            mode: 'NRSE'
            type: 'ai'
        vcHolding: -65e-3
        icHolding: 0.0

    Clamp3:
        driver: 'MultiClamp'
        channelID: 'model:MC700B,sn:00834001,chan:1'
        #pythonExecutable: 'C:\\Anaconda2-32\\python.exe'
        commandChannel: 
            device: 'DAQ'
            channel: '/Dev1/ao0'
            type: 'ao'
        primaryChannel: 
            device: 'DAQ'
            channel: '/Dev1/ai10'
            mode: 'NRSE'
            type: 'ai'
        secondaryChannel: 
            device: 'DAQ'
            channel: '/Dev1/ai9'
            mode: 'NRSE'
            type: 'ai'
        vcHolding: -65e-3
        icHolding: 0.0

        
    Clamp6:
        driver: 'MultiClamp'
        channelID: 'model:MC700B,sn:00834228,chan:2'
        #pythonExecutable: 'C:\\Anaconda2-32\\python.exe'
        commandChannel: 
            device: 'DAQ'
            channel: '/Dev1/ao0'
            type: 'ao'
        primaryChannel: 
            device: 'DAQ'
            channel: '/Dev1/ai10'
            mode: 'NRSE'
            type: 'ai'
        secondaryChannel: 
            device: 'DAQ'
            channel: '/Dev1/ai9'
            mode: 'NRSE'
            type: 'ai'
        vcHolding: -65e-3
        icHolding: 0.0

        
modules:
    Data Manager:
        module:  'DataManager'
        shortcut: 'F2'
    Task Runner:
        module: 'TaskRunner'
        shortcut: 'F6'
        config:
            ## Directory where Task Runner stores its saved tasks.
            taskDir: 'config/example/protocols'
    Camera:
        module: 'Camera'
        shortcut: 'F5'
    Patch 1:
        module: 'Patch'
        shortcut: 'F3'
        config:
            clampDev: 'Clamp1'
    MultiPatch:
        module: 'MultiPatch'
    Console:
        module: 'Console'
        config: None
    Imager:
        module: 'Imager'
        config:
            # Names of modules and devices needed by the Imager
            cameraModule: 'Camera'
            scanner: 'Scanner'
            laser: 'Laser-UV'
            detector: 'PMT', 'Input'
            attenuator: 'PockelsCell', 'Switch'
    TaskMonitor:
        module: 'TaskMonitor'

## Defines the folder types that are available when creating a new folder via
## the Data Manager. Each folder type consists of a set of metadata fields
## that will be created with the folder.            
folderTypes: readConfigFile('folderTypes.cfg')

## Base directory where ACQ4 will keep acquired data. It is recommended
## that experimenters create a hierarchy of folders within this directory to
## organize their data.
storageDir: 'S:\\Luke'

## Default compression method to use when writing HDF5 data files. Examples:
##   'gzip'        # Widely available filter, but slow
##   ('gzip', 1)   # Same filter with compression level given (0-9)
##   'lzf'         # Fastest compression; generally only available with h5py
##   'szip'        # Proprietary filter; faster but not available everywhere
##   None          # No compression
## By default, we disable compression because 'gzip' is too slow and 
## 'lzf' / 'szip' are not available on all HDF5 installations.
defaultCompression: None

## For controlling the appearance of the GUI:            
stylesheet: 'style.css'


